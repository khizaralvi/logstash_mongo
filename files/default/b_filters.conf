filter {
   grok {
     match => ["message", "%{URIPATHPARAM:request}", 
              "message", "%{MONTHDAY:MonthDay}",
               "message", "%{ISO8601_TIMEZONE}"] 
  }

  mutate {
    #Renames the 'host' field to 'client_ip'
    rename => { "host" => "client_ip" }
  }



#Tagging environments based on server names
if [Hostname] =~ "^tn7ddsmng+" {
   mutate { add_tag => ["STAGING_MONGO"] }

}

if [Hostname] =~ "^tk2ddsmng+" {
   mutate { add_tag => ["STAGING_MONGO"] }

}


if [Hostname] =~ "^n7ddsm+" {
   mutate { add_tag => ["PROD_MONGO"] }

}

#Tagging Files
if [filename] == "/u00/mongo/log/mongodb_val.log" {
   mutate { add_tag => ["VALIDATION_MONGO"] }
}

if [filename] == "/u00/mongo/log/mongodb_perf.log" {
   mutate { add_tag => ["PERF_MONGO"] }
}



   grok {
       match => {"message" => "%{URIPATHPARAM:request}"}
}
   grok {
       match => {"message" => "%{TIME:Time}"}
}
   grok {
       match => {"message" => "%{ISO8601_TIMEZONE:TimeZone}"}
}
   grok {
       match => {"message" => "%{DATE:Date}"}
}
   grok {
       match => {"message" => "%{YEAR:Year}"}
}

  grok {
       match => {"message" => "%{TIMESTAMP_ISO8601} ([A-Z]+) (?<LogEvent>([A-Z]+))"}
}

  grok {
       match => {"message" => "%{TIMESTAMP_ISO8601} (?<Severity>([A-Z]+)) ([A-Z]+)"} 
}
 
   if "_grokparsefailure" in [tags] {
        mutate{
        remove_tag => ["_grokparsefailure"]
     }
}



if [LogEvent] == "WRITE" {
    mutate { add_tag => ["QueryLog_Write"] }

   grok {
      break_on_match => false
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] ([a-zA-Z]+) (?<Database>([a-zA-Z0-9\_]+))\.([a-zA-Z0-9\$\_\.]+)"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] ([a-zA-Z]+) ([a-zA-Z0-9\_]+)\.(?<Collection>([a-zA-Z0-9\$\_\.]+))"}
      match => { "message" => "oplog: \{ acquireCount: \{ ([a-zA-Z]+): ([0-9]+) \} \} \} (?<QueryTime_ms>([0-9]+))[a-z][a-z]"}
      match => { "message" => "Collection: \{ acquireCount: \{ ([a-zA-Z]+): ([0-9]+) \} \} \} (?<QueryTime_ms>([0-9]+))[a-z][a-z]"}
      match => { "message" => "Collection: \{ acquireCount: \{ ([A-Za-z]+): ([0-9]+) \} \} \} (?<QueryTime_ms>([0-9]+))[a-z][a-z]"}
      match => { "message" => "locks:\{\} (?<QueryTime_ms>([0-9]+))[a-z][a-z]"}
      match => { "message" => "timeAcquiringMicros: \{ ([a-zA-Z]+): ([0-9]+) \} \} \} (?<QueryTime_ms>([0-9]+))[a-z][a-z]"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] warning: log line attempted \(([0-9a-z]+)\) over max size \(([0-9a-z]+)\), printing beginning and end \.\.\. ([a-zA-Z]+) (?<Database>([a-zA-Z\_]+))\.([a-zA-Z]+)"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] warning: log line attempted \(([0-9a-z]+)\) over max size \(([0-9a-z]+)\), printing beginning and end \.\.\. ([a-zA-Z]+) ([a-zA-Z\_]+)\.(?<Collection>([a-zA-Z\_]+))"}
      match => { "message" => "nscannedObjects:(?<nscannedObjects>([0-9]+))"}
      match => { "message" => "numYields:(?<numYields>([0-9]+))"}
      match => { "message" => "nreturned:(?<nreturned>([0-9]+))"}
      match => { "message" => "Database: \{ acquireCount: \{ ([a-zA-Z]+): (?<DatabaseCount>([0-9]+)) \} \}"}
      match => { "message" => "Collection: \{ acquireCount: \{ ([a-zA-Z]+): (?<CollectionCount>([0-9]+)) \}"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] ([a-zA-Z]+) ([a-zA-Z0-9\_]+)\.([a-zA-Z0-9\$\_\.]+) ([a-zA-Z]+): (?<Query>(.*?)) cursorid:"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] ([a-zA-Z]+) ([a-zA-Z0-9\_]+)\.([a-zA-Z0-9\$\_\.]+) ([a-zA-Z]+): (?<Query>(.*?)) ndeleted:"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] ([a-zA-Z]+) ([a-zA-Z0-9\_]+)\.([a-zA-Z0-9\$\_\.]+) ([a-zA-Z]+): (?<Query>(.*?)) nscanned:"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] ([a-zA-Z]+) ([a-zA-Z0-9\_]+)\.([a-zA-Z0-9\$\_\.]+) ([a-zA-Z]+): (?<Query>(.*?)) ninserted:"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] warning: log line attempted \(([0-9a-z]+)\) over max size \(([0-9a-z]+)\), printing beginning and end \.\.\. ([a-zA-Z]+) ([a-zA-Z0-9\_]+)\.([a-zA-Z0-9\$\_\.]+) ([a-zA-Z]+): (?<Query>(.*?)) nscanned:"}
       match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] ([a-zA-Z]+) ([a-zA-Z0-9\_]+)\.([a-zA-Z0-9\$\_\.]+) ([a-zA-Z]+): (?<Query>(.*?)) planSummary:"}
      
}

  mutate {
      convert => {"QueryTime_ms" => "integer"}
      convert => {"numYields" => "integer"}
      convert => {"nreturned" => "integer"}
      convert => {"nscannedObjects" => "integer"}
      convert => {"DatabaseCount" => "integer"}
      convert => {"CollectionCount" => "integer"}
      
}

  mutate {remove_tag => ["_grokparsefailure"]}
  mutate {remove_tag => ["QueryLog"]}
  mutate {remove_tag => ["CommandLog"]} 

}



if [LogEvent] == "COMMAND" {
    mutate { add_tag => ["CommandLog"] }

   grok {
      break_on_match => false
      match => { "message" => "nscannedObjects:(?<nscannedObjects>([0-9]+))"}
      match => { "message" => "ntoreturn:(?<ntoreturn>([0 TO *]))"}
      match => { "message" => "numYields:(?<numYields>([0-9]+))"}
      match => { "message" => "nreturned:(?<nreturned>([0-9]+))"}
      match => { "message" => "Database: \{ acquireCount: \{ ([a-zA-Z]+): (?<DatabaseCount>([0-9]+)) \} \}"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] ([a-zA-Z]+) (?<Database>([a-zA-Z0-9\_]+))\.([a-zA-Z0-9\.\_\$]+)"}
      match => { "message" => "Collection: \{ acquireCount: \{ ([a-zA-Z]+): (?<CollectionCount>([0-9]+)) \}"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] ([a-zA-Z]+) ([a-zA-Z0-9\_]+)\.(?<Collection>([a-zA-Z0-9\.\_\$]+))"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] warning: log line attempted \(([0-9a-z]+)\) over max size \(([0-9a-z]+)\), printing beginning and end \.\.\. ([a-zA-Z]+) (?<Database>([a-zA-Z\_]+))\.([a-zA-Z\_\$]+)"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] warning: log line attempted \(([0-9a-z]+)\) over max size \(([0-9a-z]+)\), printing beginning and end \.\.\. ([a-zA-Z]+) ([a-zA-Z\_]+)\.(?<Collection>([a-zA-Z\_\$]+))"}
      match => { "message" => "Collection: \{ acquireCount: \{ ([a-zA-Z]+): ([0-9]+) \} \} \} (?<QueryTime_ms>([0-9]+))[a-z][a-z]"}
      match => { "message" => "locks:\{\} (?<QueryTime_ms>([0-9]+))[a-z][a-z]"}
      match => { "message" => "oplog: \{ acquireCount: \{ ([a-zA-Z]+): ([0-9]+) \} \} \} (?<QueryTime_ms>([0-9]+))[a-z][a-z]"}
      match => { "message" => "timeAcquiringMicros: \{ ([a-zA-Z]+): ([0-9]+) \} \} \} (?<QueryTime_ms>([0-9]+))[a-z][a-z]"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] ([a-zA-Z]+) ([a-zA-Z0-9\_]+)\.([a-zA-Z0-9\.\_\$]+) ([a-zA-Z]+): (?<Query>(.*?)) planSummary:"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] ([a-zA-Z]+) ([a-zA-Z0-9\_]+)\.([a-zA-Z0-9\.\_\$]+) ([a-zA-Z]+): (?<Query>(.*?)) cursorid:"}
      
  } 
   mutate {
      convert => {"nscannedObjects" => "integer"}
      convert => {"ntoreturn" => "integer"}
      convert => {"numYields" => "integer"}
      convert => {"nreturned" => "integer"}
      convert => {"DatabaseCount" => "integer"}
      convert => {"CollectionCount" => "integer"}
      convert => {"QueryTime_ms" => "integer"}
  }

   mutate {remove_tag => ["QueryLog"]} 
   mutate {remove_tag => ["QueryLog_Write"]}
   mutate {remove_tag => ["_grokparsefailure"]} 
   
}


if [LogEvent] == "QUERY" {
    mutate { add_tag => ["QueryLog"] }

   grok {
      break_on_match => false
      match => { "message" => "nscannedObjects:(?<nscannedObjects>([0-9]+))"}
      match => { "message" => "ntoreturn:(?<ntoreturn>([0 TO *]))"}
      match => { "message" => "numYields:(?<numYields>([0-9]+))"}
      match => { "message" => "nreturned:(?<nreturned>([0-9]+))"}
      match => { "message" => "Database: \{ acquireCount: \{ ([a-zA-Z]+): (?<DatabaseCount>([0-9]+)) \} \}"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] ([a-zA-Z]+) (?<Database>([a-zA-Z0-9\_]+))\.([a-zA-Z0-9\.\_\$]+)"}
      match => { "message" => "Collection: \{ acquireCount: \{ ([a-zA-Z]+): (?<CollectionCount>([0-9]+)) \}"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] ([a-zA-Z]+) ([a-zA-Z0-9\_]+)\.(?<Collection>([a-zA-Z0-9\.\_\$]+))"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] warning: log line attempted \(([0-9a-z]+)\) over max size \(([0-9a-z]+)\), printing beginning and end \.\.\. ([a-zA-Z]+) (?<Database>([a-zA-Z\_]+))\.([a-zA-Z\_\$]+)"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] warning: log line attempted \(([0-9a-z]+)\) over max size \(([0-9a-z]+)\), printing beginning and end \.\.\. ([a-zA-Z]+) ([a-zA-Z\_]+)\.(?<Collection>([a-zA-Z\_\$]+))"}
      match => { "message" => "Collection: \{ acquireCount: \{ ([a-zA-Z]+): ([0-9]+) \} \} \} (?<QueryTime_ms>([0-9]+))[a-z][a-z]"}
      match => { "message" => "locks:\{\} (?<QueryTime_ms>([0-9]+))[a-z][a-z]"}
      match => { "message" => "oplog: \{ acquireCount: \{ ([a-zA-Z]+): ([0-9]+) \} \} \} (?<QueryTime_ms>([0-9]+))[a-z][a-z]"}
      match => { "message" => "timeAcquiringMicros: \{ ([a-zA-Z]+): ([0-9]+) \} \} \} (?<QueryTime_ms>([0-9]+))[a-z][a-z]"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] ([a-zA-Z]+) ([a-zA-Z0-9\_]+)\.([a-zA-Z0-9\.\_\$]+) ([a-zA-Z]+): (?<Query>(.*?)) planSummary:"}
      match => {"message" => "%{TIMESTAMP_ISO8601} I ([A-Z]+)\s*\[([a-z]+)([0-9]+)\] ([a-zA-Z]+) ([a-zA-Z0-9\_]+)\.([a-zA-Z0-9\.\_\$]+) ([a-zA-Z]+): (?<Query>(.*?)) cursorid:"}
  } 
   mutate {
      convert => {"nscannedObjects" => "integer"}
      convert => {"ntoreturn" => "integer"}
      convert => {"numYields" => "integer"}
      convert => {"nreturned" => "integer"}
      convert => {"DatabaseCount" => "integer"}
      convert => {"CollectionCount" => "integer"}
      convert => {"QueryTime_ms" => "integer"}
  }

   mutate {remove_tag => ["QueryLog_Write"]}
   mutate {remove_tag => ["CommandLog"]}
   mutate {remove_tag => ["_grokparsefailure"]} 
   
}


  mutate {
    gsub => [
      "Query", "new Date\(\d+\)", "new Date(Date)",
      "Query", "ObjectId\(\'([0-9a-zA-Z]+)\'\)", "ObjectId(ID)",
      "Query", "\"([0-9a-zA-Z\s*\-\_\"\.\/\:$]+)\"", "value",
      "Query", "([0-9\-]+)", "value", 
      "Query", "\[([0-9a-zA-Z\s*\-\_\"\,\.\:\{\}$]+)\]", "[value]",
      "Query", "\(([0-9a-zA-Z\s*\-\_\"\,\.\:\{\}$]+)\)", "(value)",
      "Query", "\[\]", "[value]",
      "Query", "false", "boolean",
      "Query", "true", "boolean",
      "Query", "\~([0-9a-zA-Z]+)\~" , "%{Hostname}"      
     ]
    remove_field => [ "[Query][1]" ]
    update => {"Query" => "~%{Hostname}~.%{Database}.%{Collection} %{Query}"}
  }


#CODE TO AGGREGATE QUERIES
 aggregate {
    task_id => "%{Query}"
    code => "map['numTest'] ||= 0; map['numTest'] += event['QueryTime_ms']; map['count'] ||= 0; 
             map['count'] += 1; event['Total_QueryTime_ms'] = map['numTest']; event['Total_Count'] = map['count']; 
             event['Average_QueryTime_ms'] = map['numTest'] / map['count']; map['threshold'] ||= 0; map['threshold'] = event['Average_QueryTime_ms'] * 3;
             event['QueryThreshold'] = map['threshold']"
    push_map_as_event_on_timeout => true
    timeout => 600 # 10 minutes timeout
    timeout_tags => ['_aggregatetimeout']
    add_tag => ["query_aggregation"] 
  }


#CODE TO AGGREGATE SOCKET EXCEPTIONS
if [LogEvent] == "NETWORK" and "SocketException" in [message] {
 aggregate {
    task_id => "%{LogEvent}"
    code => "map['count'] ||= 0;map['count'] += 1; event['Total_Count'] = map['count'];
             map['sockets'] ||= []; map['sockets'] << event['Hostname'] + ': ' + event['message'];
             event['SocketExceptions'] = map ['sockets']"
    push_map_as_event_on_timeout => true
    timeout => 600 # 10 minutes timeout
    timeout_tags => ['_aggregatetimeout']
    add_tag => ["socket_aggregation"] 
  }
}


#TAGGING IF SOCKET EXCEPTIONS SURPASS THRESHOLD 
if "socket_aggregation" in [tags] {
	if [Total_Count] == 5 {
                   mutate { add_tag => ["Socket_Counts_Exceeded"] }
		}
	}

#TAGGING LONG RUNNING QUERIES
if "query_aggregation" in [tags] {
	if [QueryTime_ms] > [QueryThreshold] {
                   mutate { add_tag => ["Long_Running_Query"] }
		}
	}

}